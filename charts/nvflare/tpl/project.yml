api_version: 3
name: {{ .Values.project.name }}
description: {{ .Values.project.description }}

participants:
  # Change the name of the overseer to the Fully Qualified Domain Name (FQDN)
  # of the overseer, for example: overseer.example.com.
  # Ensure that the FQDN is correctly mapped in the /etc/hosts file.
  - name: {{ include "nvflare.overseer.fqdn" . }}
    type: overseer
    org: {{ .Values.project.organisation }}
    protocol: https
    api_root: /api/v1
    port: {{ .Values.ingress.enabled | ternary "443" .Values.overseer.service.port }}
  # Change the name of the server (server1) to the Fully Qualified Domain Name
  # (FQDN) of the first server, for example: server1.example.com.
  # Ensure that the FQDN is correctly mapped in the /etc/hosts file.
  - name: {{ printf "%s.%s.svc.cluster.local" (include "nvflare.server.fullname" .) .Release.Namespace }}
    type: server
    org: {{ .Values.project.organisation }}
    fed_learn_port: {{ .Values.server.service.fl.port }}
    admin_port: {{ .Values.server.service.admin.port }}
  # Change the name of the server (server2) to the Fully Qualified Domain Name
  # (FQDN) of the second server, for example: server2.example.com.
  # Ensure that the FQDN is correctly mapped in the /etc/hosts file.
  - name: {{ printf "%s-2.%s.svc.cluster.local" (include "nvflare.server.fullname" .) .Release.Namespace }}
    type: server
    org: {{ .Values.project.organisation }}
    fed_learn_port: {{ .Values.server.service.fl.port }}
    admin_port: {{ .Values.server.service.admin.port }}
  #- name: site-1
  #  type: client
  #  org: nvidia
    # listening_host will enable creating one pair of cert/private key for this client
    # so it can behave like a server for client api.  The value must be a hostname that
    # client api can reach via network.
    # listening_host: site-1-lh
  #- name: site-2
  #  type: client
  #  org: nvidia
  - name: admin@nvidia.com
    type: admin
    org: nvidia
    role: project_admin

# The same methods in all builders are called in their order defined in builders section
builders:
  - path: nvflare.lighter.impl.workspace.WorkspaceBuilder
    args:
      template_file:
        - master_template.yml
  - path: nvflare.lighter.impl.template.TemplateBuilder
  - path: nvflare.lighter.impl.static_file.StaticFileBuilder
    args:
      # config_folder can be set to inform NVIDIA FLARE where to get configuration
      config_folder: config
      # scheme for communication driver (currently supporting the default, grpc, only).
      scheme: grpc
      # app_validator is used to verify if uploaded app has proper structures
      # if not set, no app_validator is included in fed_server.json
      {{- if .Values.project.app_validator }}
      app_validator: {{ .Values.project.app_validator }}
      {{- else }}
      # app_validator: PATH_TO_YOUR_OWN_APP_VALIDATOR
      {{- end }}

      # download_job_url is set to http://download.server.com/ as default in fed_server.json.  You can override this
      # to different url.
      download_job_url: {{ .Values.project.download_job_url }}

      overseer_agent:
        path: nvflare.ha.overseer_agent.HttpOverseerAgent
        # if overseer_exists is true, args here are ignored.  Provisioning
        #   tool will fill role, name and other local parameters automatically.
        # if overseer_exists is false, args in this section will be used.
        overseer_exists: {{ .Values.overseer.enabled | ternary "true" "false" }}
        {{- if not .Values.overseer.enabled }}
        args:
          sp_end_point:
          sp_end_point: .com.8002:8003
  - path: nvflare.lighter.impl.cert.CertBuilder
  # - path: nvflare.lighter.impl.he.HEBuilder
  #   args:
  #     poly_modulus_degree: 8192
  #     coeff_mod_bit_sizes: [60, 40, 40]
  #     scale_bits: 40
  #     scheme: CKKS
  - path: nvflare.lighter.impl.signature.SignatureBuilder
