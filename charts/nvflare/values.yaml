# Default values for nvflare.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
global:
  storageClassName: ""

project:
  name: "example-project"
  admin: "project-admin@cluster.local"
  # admins: []
  #  - admin@nvidia.com
  organisation: "nvidia"

dashboard:
  enabled: false
  image:
    repository: nvflare/nvflare
    tag: 2.5.2
  persistence:
    existingVolumeClaim: ""
    accessModes:
      - ReadWriteOnce
    storageSize: 100Mi
    storageClassName: ""
    selector: {}
  service:
    type: ClusterIP
    port: 8443
  livenessProbe:
    httpGet:
      httpHeaders:
        - name: Accept
          value: application/json
      path: /api/v1/project
      port: http
  readinessProbe:
    httpGet:
      httpHeaders:
        - name: Accept
          value: application/json
      path: /api/v1/project
      port: http
  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
  ingress:
    enabled: false

overseer:
  enabled: false
  service:
    type: ClusterIP
    port: 8443
  certs:
    secretName: ""
    keyfileName: tls.key
    certfileName: tls.crt
    cacertName: ca.crt
  # ISSUE client auth enabled, no public path for probe
  # https://github.com/NVIDIA/NVFlare/issues/240
  # WORKAROUND add gunicorn_worker_healthcheck https://pypi.org/project/gunicorn_worker_healthcheck/
  livenessProbe:
    tcpSocket:
      port: 8443
  readinessProbe:
    tcpSocket:
      port: 8443
  ingress:
    enabled: false

server:
  enabled: false
  overseerEndpoint: ""
  certs:
    secretName: ""
    keyfileName: tls.key
    certfileName: tls.crt
    cacertName: ca.crt
  service:
    type: ClusterIP
    fl:
      port: 8002
    admin:
      port: 8003
  # ISSUE client auth enabled, no public path for probe
  livenessProbe:
    tcpSocket:
      port: 8002
  readinessProbe:
    tcpSocket:
      port: 8002

site:
  enabled: false
  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    #   gpu: 4
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
  # Additional volumes on the Site Deployment definition.
  volumes: []
  # - name: foo
  #   persistentVolumeClaim:
  #     claimName: nvflare-datasets

  # Additional volumeMounts on the Site Deployment definition.
  volumeMounts: []
  # - name: foo
  #   mountPath: "/workspace/foo"
  #   readOnly: false

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: nvflare/nvflare
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext:
  fsGroup: 2000

securityContext:
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 2000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 80

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector:
  kubernetes.io/arch: amd64
  kubernetes.io/os: linux

tolerations: []

affinity: {}
