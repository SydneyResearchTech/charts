---
# charts/omero-server/templates/jobs.yaml
#
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "omero-server.fullname" . }}-db-migration
  labels:
    {{- include "omero-server.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    metadata:
      name: {{ include "omero-server.fullname" . }}-db-migration
      labels:
        {{- include "omero-server.labels" . | nindent 8 }}
    spec:
      restartPolicy: Never
      containers:
        - name: omero-sql
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          command: ["sh","-c"]
          args:
            - |
              omero db script -f /scratch/OMERO5.4__0.sql --password {{ include "omero-server.defaultRootPassword" . }}
              cat /scratch/OMERO5.4__0.sql
          env:
            {{- include "omero.postgresql.environmentVariables" . | nindent 12 }}
            {{- include "omero-server.environmentVariables" . | nindent 12 }}
          volumeMounts:
            {{- include "omero-server.volumeMounts" . |nindent 12 }}
            - mountPath: /scratch
              name: {{ include "omero-server.fullname" . }}-db-migration-cache
        - name: db-migration
          image: postgres
          command: ["sh","-c"]
          args:
            - |
              until [ -f /scratch/OMERO5.4__0.sql ]; do echo "waiting for sql"; sleep 2; done
              until tail -n1 /scratch/OMERO5.4__0.sql |grep -q 'COMMIT;'; do echo "waiting for sql completion"; sleep 2; done
              until pg_isready; do echo "waiting for database connection"; sleep 2; done
              until psql -lXqAt |cut -d'|' -f1 |grep -qw ${PGDATABASE}; do echo "waiting for database ${PGDATABASE}"; sleep 2; done
              echo 'psql -Xe </scratch/OMERO5.4__0.sql'
              psql -Xe </scratch/OMERO5.4__0.sql
          env:
            {{- include "omero.postgresql.environmentVariables" . | nindent 12 }}
            - {name: TMPDIR, value: /scratch}
          volumeMounts:
            - mountPath: /scratch
              name: {{ include "omero-server.fullname" . }}-db-migration-cache
      volumes:
        {{- include "omero-server.volumes" . |nindent 8 }}
        - name: {{ include "omero-server.fullname" . }}-db-migration-cache
          emptyDir: {}
{{- if and .Values.global.postgresql.auth.existingSecret .Values.global.postgresql.auth.secretKeys.adminPasswordKey }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "omero-server.fullname" . }}-db-setup
  labels:
    {{- include "omero-server.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    metadata:
      name: {{ include "omero-server.fullname" . }}-db-setup
      labels:
        {{- include "omero-server.labels" . | nindent 8 }}
    spec:
      restartPolicy: Never
      containers:
        - name: {{ .Chart.Name }}-db-setup
          image: "postgresql:latest"
          command: ["sh","-c"]
          args:
            - |
              until pg_isready; do echo "waiting for database connection'; sleep 2; done
              PGNEWUSERPWD="${PGPASSWORD}"
              PGPASSWORD="${PGpostgresPassword}"
              export PGNEWUSERPWD PGPASSWORD
              psql -d postgres -U postgres -w <<EOF
              SELECT 'CREATE DATABASE ${PGDATABASE};' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname='${PGDATABASE}');\gexec
              DO $do$
              BEGIN
              CREATE USER $PGUSER WITH NOCREATEDB NOCREATEUSER PASSWORD '${PGNEWUSERPWD}';
              EXCEPTION WHEN duplicate_object THEN RAISE NOTICE '%, skipping', SQLERRM USING ERRCODE = SQLSTATE;
              END
              $do$;
              GRANT ALL PRIVILEGES ON DATABASE $PGDATABASE TO $PGUSER;
              EOF
          env:
            {{- include "omero.postgresql.environmentVariables" . | nindent 12 }}
            - name: PGpostgresPassword
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.postgresql.auth.existingSecret }}
                  key: {{ .Values.global.postgresql.auth.secretKeys.adminPasswordKey }}
                  optional: false
{{- end }}
