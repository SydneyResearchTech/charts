# Default values for cryosparc.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
global:
  storageClassName: ""

license_id: ""

# base port number for the cryoSPARC instance you are connecting the worker node to
base_port: "39000"

project_container:
  dir: "/cryosparc_projects"
  accessModes: []
  persistenVolumeClaimName: ""
  size: 1Gi
  storageClassName: ""
  selector: {}

volumes:
  - name: projects
    accessModes: []
    path: /cryosparc_projects
    persistenVolumeClaimName: ""
    size: 1Gi
    storageClassName: ""
    selector: {}
  - name: ssd
    accessModes: [ReadWriteOnce]
    path: /cryosparc_ssd
    size: 1Gi
    storageClassName: local-storage

ssh_secret:
  name: "cryosparc-ssh"
  keys:
    private: "id_ed25519"
    public: "id_ed25519.pub"

master:
  enabled: true
  admin:
    email: "admin@cluster.local"
    secret:
      name: ""
      key: password

  user:
    csv_secret:
      name: ""
    users: []
      # - {email: 'admin@sydney.edu.au', password: 'password', admin: false, username: 'admin', firstname: 'Admin', lastname: 'User'}

  #manage_users: false
  #master_hostname: "decom"
  hostname: ""

  #project_volumes:
  #  - mountPath: /cryosparc_projects
  #    storageClassName: ""
  #    volumeName: cryosparc-projects
  #    accessModes:
  #      - ReadWriteMany
  #    resources:
  #      requests: 1Gi

  command_core:
    command: python -c "import cryosparc_command.command_core as serv; serv.start(port=${CRYOSPARC_COMMAND_CORE_PORT})"
    service:
      type: ClusterIP
      port: 39002

  command_vis:
    command: python -c "import cryosparc_command.command_vis as serv; serv.start(port=${CRYOSPARC_COMMAND_VIS_PORT})"

  command_rtp:
    command: python -c "import cryosparc_command.command_rtp as serv; serv.start(port=${CRYOSPARC_COMMAND_RTP_PORT})"

  mongodb:
    command: >
      mongod ${CRYOSPARC_DB_ENABLE_AUTH_FLAG}
      --dbpath "${CRYOSPARC_DB_PATH}"
      --port ${CRYOSPARC_MONGO_PORT}
      --oplogSize 64
      --replSet meteor
      ${CRYOSPARC_MONGO_EXTRA_FLAGS}
      --wiredTigerCacheSizeGB ${CRYOSPARC_MONGO_CACHE_GB}
      --bind_ip_all
    volume:
      accessModes: [ReadWriteOnce]
      size: 500Mi
      storageClassName: ""
      selector: {}

  # WORKAROUND side container(s) for log management
  logs: [app,app_api,command_core,command_rtp,command_vis,database,supervisord]

  replicaCount: 1

  image:
    repository: localhost:32000/cryosparc-master
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: ""

  imagePullSecrets: []
  nameOverride: ""
  fullnameOverride: ""

  podAnnotations: {}

  service:
    type: ClusterIP
    port: 39000

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  nodeSelector: {}

  tolerations: []

  affinity: {}

worker:
  # hostname of the worker node to connect to your cryoSPARC instance
  hostname: ""
  # hostname of the server where the master is installed on
  master: ""
  # path to directory on local SSD if "" --nossd parameter will apply
  ssd_path: ""
  # use when updating and existing configuration
  update: false
  # custom SSH connection string such as user@hostname
  ssh_string: ""
  # enable this number of CPU cores; 0 uses all cpu cores
  cpus: 0
  # connect worker with no GPUs
  nogpu: false
  # enable specific GPU devices only, e.g. gpus: 0,1,2,3
  # For advanced configuration, run the gpulist command
  # cryosparcw gpulist
  gpus: ""
  # quota of how much SSD space to use (MB); 0 = no quota
  ssd_quota: 0
  # minimum free space to leave on SSD (MB); 0 = no reserve
  ssd_reseved: 0
  # name of lane to add worker to
  lane: ""
  # force creation of a new lane if the lane specified does not exist
  new_lane: false

  # Deployment or DaemonSet or StatefulSet
  workload_resource: StatefulSet

  replicaCount: 1

  image:
    repository: localhost:32000/cryosparc-worker
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: ""
 
  imagePullSecrets: []
  nameOverride: ""
  fullnameOverride: ""

  podAnnotations: {}

  service:
    type: ClusterIP
    port: 2222

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  nodeSelector: {}
  tolerations: []
  #  - key
  affinity: {}

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podSecurityContext:
  # fsGroup: 2000
  runAsUser: 1001
  runAsGroup: 1001

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# https://github.com/oauth2-proxy/manifests/tree/main/helm/oauth2-proxy
oauth2-proxy:
  enabled: false
  # config:
  #   clientID: cryosparc.lo.sydney.edu.au
  #   clientSecret: AuaqQnbsCMfsJdzXNyIGV9Oa54yEE69a
  #   cookieSecret: L1oyVmlSMy9JYnFnZUxsbVlYT3AwaXh5eHdFbWVqSHo=
  #   configFile: |-
  #     provider = "keycloak-oidc"
  #     provider_display_name = "keycloak@lo.sydney.edu.au"
  #     oidc_issuer_url = "https://keycloak.lo.sydney.edu.au/realms/master"
  #     redirect_url = "https://cryosparc.lo.sydney.edu.au/oauth2/callback"
  #     email_domains = [
  #       "*"
  #     ]
  #     code_challenge_method = "S256"
  #     ssl_insecure_skip_verify = true
  #     insecure_oidc_allow_unverified_email = true
  #     request_logging = true
  # service:
  #   portNumber: 4180
  # ingress:
  #   enabled: true
  #   className: nginx
  #   path: /oauth2
  #   pathType: Prefix
  #   annotations:
  #     # ISSUE upstream sent too big header
  #     nginx.ingress.kubernetes.io/proxy-buffer-size: "256k"
  #   hosts:
  #   - cryosparc.lo.sydney.edu.au
  #   tls:
  #   - hosts:
  #     - cryosparc.lo.sydney.edu.au
  #     secretName: cryosparc-tls
