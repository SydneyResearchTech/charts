{{- if and .Values.master.enabled .Values.master.mongodb.backup.enabled -}}
{{- $image := printf "%s:%s" .Values.master.image.repository (.Values.master.image.tag | default .Chart.AppVersion) -}}
{{- $podSecurityContext := .Values.podSecurityContext -}}
{{- $securityContext := .Values.securityContext -}}
{{- $cryosparcFullname := (include "cryosparc.fullname" .) }}
{{- $cryosparcLabels := (include "cryosparc.labels" .) }}
{{- $releaseName := .Release.Name }}
{{- $cryosparcMasterVolumeMounts := (include "cryosparc.master.volumeMounts" .) }}
{{- $cryosparcMasterVolumes := (include "cryosparc.master.volumes" .) }}
{{- $dir := "/cryosparc_database_backup" }}
{{- with .Values.master.mongodb.backup }}
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ $cryosparcFullname }}-mongodb-backup
  labels:
    {{- $cryosparcLabels | nindent 4 }}
spec:
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        spec:
          securityContext:
            {{- toYaml $podSecurityContext | nindent 12 }}
          containers:
          - name: mongodb-backup
            securityContext:
              {{- toYaml $securityContext | nindent 14 }}
            image: "{{ $image }}"
            command: ["bash","-c"]
            args:
            - |
              eval $(cryosparcm env)
              dump_path="{{ $dir }}/{{ .file }}"
              mongo_uri=$(python -c "from cryosparc_compute import database_management; print(database_management.get_mongo_uri('meteor'))")

              start_time=$(python -c "import time; print(time.time())")
              start_doc="{'type' : 'backup', 'activity' : 'backup_start', 'location' : \"$dump_path\", 'timestamp' : $start_time}"
              mongo --eval "db.instance_activity.insertOne($start_doc)" $mongo_uri
              echo "${start_doc}"

              mongodump --archive="${dump_path}" --uri=$mongo_uri
              exit_code=$?

              end_time=$(python -c "import time; print(time.time())")
              time_elapsed=$(python -c "print($end_time - $start_time)")
              if [ $exit_code -ne 0 ]; then
                end_doc="{'type' : 'backup', 'activity' : 'backup_fail', 'location' : \"$dump_path\", 'time_elapsed' : $time_elapsed, 'timestamp' : $end_time}"
                >&2 echo "${end_doc}"
              else
                size_bytes=$(du -bs $dump_path | head -n1 | awk '{print $1;}')
                end_doc="{'type' : 'backup', 'activity' : 'backup_complete', 'location' : \"$dump_path\", 'size_bytes' : $size_bytes, 'time_elapsed' : $time_elapsed, 'timestamp' : $end_time}"
                echo "${end_doc}"
              fi
              mongo --eval "db.instance_activity.insertOne($end_doc)" $mongo_uri > /dev/null
              exit $exit_code
            volumeMounts:
            {{- $cryosparcMasterVolumeMounts |nindent 12 }}
            - mountPath: {{ $dir }}
              name: mongodb-backup
          restartPolicy: OnFailure
          volumes:
          {{- $cryosparcMasterVolumes |nindent 10 }}
          - name: mongodb-backup
            persistentVolumeClaim:
              claimName: {{ default (printf "%s-%s" $releaseName "mongodb-backup") .persistentVolumeClaimName }}
  schedule: {{ .schedule |quote }}
  startingDeadlineSeconds: {{ .startingDeadlineSeconds }}
{{- if not .persistentVolumeClaimName }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ $cryosparcFullname }}-mongodb-backup
  labels:
    {{- $cryosparcLabels | nindent 4 }}
spec:
  accessModes:
    {{- default (list "ReadWriteOnce") .accessModes |toYaml |nindent 4 }}
  volumeMode: Filesystem
  resources:
    requests:
      storage: {{ .size }}
  {{- include "cryosparc.storageClassName" (dict "vol" . "global" $.Values.global) |nindent 2 }}
  {{- if .selector }}
  selector:
    {{- default (dict) .selector |toYaml |nindent 4 }}
  {{- end }}
{{- end }}
{{- end }}
{{- end }}
